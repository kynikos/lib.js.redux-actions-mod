// Generated by CoffeeScript 2.1.1
(function() {
  // This file is part of redux-actions-mod
  // Copyright (C) 2018-present Dario Giovannetti <dev@dariogiovannetti.net>
  // Licensed under MIT
  // https://github.com/kynikos/redux-actions-mod/blob/master/LICENSE
  var combineActions, createActionsWithMeta, handleAction, handleActions, redux_actions,
    slice = [].slice;

  redux_actions = require('redux-actions');

  createActionsWithMeta = function(meta, actionMap, ...identityActions) {
    var actionMapWithMeta, payloadCreator, type;
    actionMapWithMeta = {};
    for (type in actionMap) {
      payloadCreator = actionMap[type];
      actionMapWithMeta[type] = [
        payloadCreator,
        function() {
          return meta;
        }
      ];
    }
    return redux_actions.createActions(actionMapWithMeta, ...identityActions);
  };

  combineActions = function(...actions) {
    var i, reducer, ref;
    ref = actions, actions = 2 <= ref.length ? slice.call(ref, 0, i = ref.length - 1) : (i = 0, []), reducer = ref[i++];
    return {
      [`${redux_actions.combineActions(...actions)}`]: reducer
    };
  };

  handleAction = function(defaultState, type, reducer) {
    return redux_actions.handleAction(type, reducer, defaultState);
  };

  handleActions = function(defaultState, reducerMap) {
    return redux_actions.handleActions(reducerMap, defaultState);
  };

  module.exports = {
    createAction: redux_actions.createAction,
    createActions: redux_actions.createActions,
    createActionsWithMeta,
    combineActions,
    handleAction,
    handleActions
  };

}).call(this);
